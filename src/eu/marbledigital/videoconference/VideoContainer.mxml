<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/halo"
			   applicationComplete="videoConferenceApplicationCompleteHandler(event)">

	<fx:Script>
		<![CDATA[
			import flash.events.Event;
			import flash.events.SyncEvent;
			import flash.external.*;
			import flash.net.NetConnection;
			import flash.net.Responder;
			import flash.net.SharedObject;
			import flash.system.Security;
			import flash.utils.Dictionary;
			import flash.utils.IDataOutput;
			import mx.collections.ArrayList;
			import mx.controls.Button;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			private var roomToken:String;
			private var userId:int;
			private var userName:String;
			private var roomId:String;
			private var connectionToken:String;
			private var rtmpUrl:String;
			private var notifyJS:Boolean;
			private var streamsPlayed:Dictionary;
			public static var instance:eu.marbledigital.videoconference.VideoContainer;
			
			private var netConnection:NetConnection;
			
			public function videoConferenceApplicationCompleteHandler(event:Event):void
			{
				try
				{
					Security.allowDomain('*');
					Security.allowInsecureDomain('*');
					init();
					instance = this;
				}
				catch (error:Error)
				{
					JSProxy.log("Video conference video container init error: " + error);
				}
			}
			
			private function init():void
			{
				var params:Object = FlexGlobals.topLevelApplication.parameters;
				roomToken = params.roomToken;
				userId = params.userId || 2;
				userName = params.userName || "pezia";
				notifyJS = params.notifyJS;
				//connectionToken = params.connectionToken;
				rtmpUrl = params.rtmpUrl || "rtmp://192.168.0.20/VideoConferenceStreaming/1";
				
				roomId = rtmpUrl.substring(rtmpUrl.lastIndexOf('/') + 1);
				
				streamsPlayed = new Dictionary();
				
				JSProxy.log("Parameters parsed.");
				
				JSProxy.event("InitComplete", null);
				
				this.connect();
				
				if (ExternalInterface.available)
				{
					ExternalInterface.addCallback("publishWebcam", publishWebcam);
					ExternalInterface.addCallback("playStream", playStream);
				}
			}
			
			public function connect():void
			{
				try
				{
					if (netConnection != null)
					{
						netConnection.removeEventListener(NetStatusEvent.NET_STATUS, onConnectionStatus);
						netConnection.removeEventListener(AsyncErrorEvent.ASYNC_ERROR, onConnectionAsyncError);
						netConnection.removeEventListener(IOErrorEvent.IO_ERROR, onConnectionIOError);
						netConnection.close();
					}
				}
				catch (e:Error)
				{
					JSProxy.log("NetConnection close failed: " + e.message);
				}
				
				netConnection = new NetConnection();
				
				netConnection.client = new Client();
				netConnection.objectEncoding = ObjectEncoding.AMF3;
				netConnection.addEventListener(NetStatusEvent.NET_STATUS, onConnectionStatus);
				netConnection.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onConnectionAsyncError);
				netConnection.addEventListener(IOErrorEvent.IO_ERROR, onConnectionIOError);
				netConnection.connect(rtmpUrl, {user_Id: userId, room_Token: roomToken});
			}
			
			public function publishWebcam():void
			{
				JSProxy.log('Publishing to: ' + rtmpUrl);
				try
				{
					var ui:StreamerUI = new StreamerUI();
					var source:VideoSource = new VideoSource(this, ui, netConnection);
					ui.init(this, source, userId, userName, source.isCameraSupported());
					ui.addEventListener(FlexEvent.READY, function(evt:FlexEvent):void
						{
							source.publishStream(rtmpUrl, userId, roomToken);
							JSProxy.log("Publishing stream");
						});
					mainPanel.addElement(ui);
					
				}
				catch (ex:Error)
				{
					JSProxy.log("Unable to publish webcam: " + ex);
				}
			}
			
			public function playStream(userId:int, userName:String):void
			{
				if (this.userId == userId || streamsPlayed[userId] != null)
				{
					JSProxy.log("Skipping user " + userId + " play, already playing");
					return;
				}
				
				try
				{
					
					var loopbackUi:StreamerUI = new StreamerUI();
					var loopbackSource:VideoSource = new VideoSource(this, loopbackUi, netConnection);
					loopbackUi.init(this, loopbackSource, userId, userName, loopbackSource.isCameraSupported());
					
					loopbackUi.addEventListener(FlexEvent.READY, function(evt:FlexEvent):void
						{
							loopbackSource.playStream(rtmpUrl, userId, roomToken);
							loopbackUi.setCameraSize(640, 480);
							//hozzáadás a dictionary-hez
							streamsPlayed[userId] = loopbackUi;
							JSProxy.log("Playing stream");
						});
					
					mainPanel.addElement(loopbackUi);
				}
				catch (ex:Error)
				{
					JSProxy.log("Unable to play stream: " + ex);
					JSProxy.log(ex.getStackTrace());
				}
			}
			
			public function removeStream(userId:int):void
			{
				if(streamsPlayed[userId] != null) {
					mainPanel.removeElement(streamsPlayed[userId]);
					streamsPlayed[userId].destroy();
					streamsPlayed[userId] = null;
				}
			}
			
			private function onConnectionStatus(event:NetStatusEvent):void
			{
				JSProxy.log("connectionStatusHandler: " + event.info.code);
				
				if (event.target != netConnection)
				{
					return;
				}
				
				try
				{
					if (event.info.code == "NetConnection.Connect.Success")
					{
						if (notifyJS && ExternalInterface.available)
						{
							ExternalInterface.call('flashReady');
						}
					}
				}
				catch (ex:Error)
				{
					JSProxy.log("onConnectionStatus excepton: " + ex);
				}
			}
			
			protected function onConnectionAsyncError(event:AsyncErrorEvent):void
			{
				JSProxy.log("connectionAsyncError: " + event + " in " + this.toString());
			}
			
			protected function onConnectionIOError(event:IOErrorEvent):void
			{
				JSProxy.log("connectionIOError: " + event + " in " + toString());
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<s:BorderContainer width="100%"
					   height="100%"
					   borderWeight="1"
					   borderStyle="solid"
					   borderColor="0x000000">
		<s:layout>
			<s:HorizontalLayout />
		</s:layout>

		<s:BorderContainer id="leftContainer"
						   width="100%"
						   height="100%"
						   borderWeight="0"
						   borderColor="0x000000">
			<s:Scroller id="mainScroller"
						width="100%"
						height="100%"
						horizontalScrollPolicy="off">
				<s:Group id="mainPanel"
						 clipAndEnableScrolling="true">
					<s:layout>
						<s:HorizontalLayout />
					</s:layout>
				</s:Group>
			</s:Scroller>
		</s:BorderContainer>
		<s:BorderContainer id="rightContainer"
						   visible="false"
						   includeInLayout="false"
						   width="100%"
						   height="100%"
						   borderWeight="0">
			<s:layout>
				<s:VerticalLayout />
			</s:layout>
			<s:Scroller id="rightScroller"
						width="100%"
						height="100%">
				<s:Group id="rightPanel"
						 clipAndEnableScrolling="true">
				</s:Group>
			</s:Scroller>
		</s:BorderContainer>
	</s:BorderContainer>
</s:Application>
